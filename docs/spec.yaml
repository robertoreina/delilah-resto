openapi: 3.0.2
info:
  description: API para operaciones CRUD de una app de manejo de pedidos de un restaurante
  version: 1.0.0-oas3
  title: API Delilah Resto
  contact:
    email: robertto.e@gmail.com
servers:
- url: http://localhost:3000
tags:
- name: login
  description: login module
- name: users
  description: users module
- name: products
  description: products module
- name: orders
  description: orders module  
- name: favorites
  description: favorites module  
paths:
  /login:
    post:
      tags:
      - login
      summary: user login and authentication
      requestBody:
        description: send user and password for to get token and user's data
        content:
          application/json:
            schema:
              properties:
                user:
                  type: string
                  description: usermane
                  example: 'RREINA'
                password:
                  type: string
                  description: user password
                  example: 'a1b2c3de'
      responses:
        200:
          description: Login OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJfaWQiOjIsImlzX2FkbWluIjpmYWxzZX0sImlhdCI6MTYyNjIyODQ4Nn0.6HmGuUJAI1sGjIpgg8JzQAksB9TmZXytW8LHJSUzyk0'
                  data:
                    $ref: '#/components/schemas/user_data_response'
        401:
          $ref: '#/components/responses/Unauthorized' 
        500:
          $ref: '#/components/responses/ServerError' 
  /user:
    post:
      tags:
      - users
      summary: created new user
      requestBody:
        description: send user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_data_request'
      responses:
        201:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'user created'
                  data:
                    type: object
                    properties:
                      user_id:
                        type: integer
                        example: 2
        401:
          $ref: '#/components/responses/Unauthorized' 
        409:
          $ref: '#/components/responses/Conflict'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/ServerError' 
    get:
      tags:
      - users
      summary: list all users
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/user_data_response'
                  control:
                    $ref: '#/components/schemas/control'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError' 
  /user/{user_id}:
    get:
      tags:
      - users
      summary: get user by id
      security:
        - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        description: user id
        required: true
        schema: 
          type: integer
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/user_data_response'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError' 
    put:
      tags:
      - users
      summary:  update data user
      security:
        - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        description: user id
        required: true
        schema: 
          type: integer
      requestBody:
        description: send user data to update
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Roberto Reina'
                phone:
                  type: string
                  example: '56995694692'
                address:
                  type: string
                  example: 'Providencia 2144, Santiago'
                password:
                  type: string
                  example: "a34dnfj3sf"

      responses:
        202:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 202
                  message:
                    type: string
                    example: 'user update'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/ServerError' 
    delete:
      tags:
      - users
      summary: delete user by id
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        description: user id
        required: true
        schema: 
          type: integer
      responses:
        202:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 202
                  message:
                    type: string
                    example: 'user removed'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError' 
  /user/{user_id}/favorite:
    get:
      tags:
      - users
      summary: get user favorite by user id
      security:
        - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        description: user id
        required: true
        schema: 
          type: integer
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                       type: object
                       properties:
                        id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 33
                        product:
                          $ref: '#/components/schemas/product'
                  control:
                    $ref: '#/components/schemas/control'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError' 
  /user/{user_id}/favorite/{favorite_id}:
    delete:
      tags:
      - users
      summary: delete user favorite by favorite id 
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        description: user id
        required: true
        schema: 
          type: integer
      - name: favorite_id
        in: path
        description: favorite id
        required: true
        schema: 
          type: integer
      responses:
        202:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 202
                  message:
                    type: string
                    example: 'user removed'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError' 
  /user/{user_id}/order:
    get:
      tags:
      - users
      summary: get order by user id
      security:
        - bearerAuth: []
      parameters:
      - name: user_id
        in: path
        description: user id
        required: true
        schema: 
          type: integer
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/order'
                  control:
                    $ref: '#/components/schemas/control'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'  
  /favorite:
    post:
      tags:
      - favorites
      summary: assign favorite product to user
      security:
        - bearerAuth: []
      requestBody:
        description: send product id
        content:
          application/json:
            schema:
              properties:
                product_id:
                  type: string
                  example: 12
      responses:
        201:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'favorite created'
                  data:
                    type: object
                    properties:
                      favorite_id:
                        type: integer
                        example: 2
        401:
          $ref: '#/components/responses/Unauthorized'
        409:
          $ref: '#/components/responses/Conflict'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/ServerError'
    get:
      tags:
      - favorites
      summary: list all favorites
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                       type: object
                       properties:
                        id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 33
                        product:
                          $ref: '#/components/schemas/product'
                  control:
                    $ref: '#/components/schemas/control'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  /product:
    post:
      tags:
      - products
      summary: create new product
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      requestBody:
        description: send product data 
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                  example: 'Jugo de Manzana'
                price:
                  type: integer
                  example: 120
                quantity_available:
                  type: integer
                  example: 50
      responses:
        201:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'product created'
                  data:
                    type: object
                    properties: 
                      product_id:
                        type: integer
                        example: 2
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/ServerError'
    get:
      tags:
      - products
      summary: list all products
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/product'
                  control:
                    $ref: '#/components/schemas/control'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'           
  /product/{product_id}:
    get:
      tags:
      - products
      summary: get product by id
      security:
        - bearerAuth: []
      parameters:
      - name: product_id
        in: path
        description: product id
        required: true
        schema: 
          type: integer
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                      $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError' 
    put:
      tags:
      - products
      summary:  update data product
      security:
        - bearerAuth: []
      description: "**service available only for admin user**"
      parameters:
      - name: product_id
        in: path
        description: product id
        required: true
        schema: 
          type: integer
      requestBody:
        description: send user product to update
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: 'Jugo de Manzana'
                price:
                  type: integer
                  example: 120
                quantity_available:
                  type: integer
                  example: 50
      responses:
        202:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 202
                  message:
                    type: string
                    example: 'product update'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/ServerError' 
    delete:
      tags:
      - products
      summary: delete product by id
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      parameters:
      - name: product_id
        in: path
        description: product id
        required: true
        schema: 
          type: integer
      responses:
        202:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 202
                  message:
                    type: string
                    example: 'product removed'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError' 
  /order:
    post:
      tags:
      - orders
      summary: create new order
      security:
        - bearerAuth: []
      requestBody:
        description: send order data 
        content:
          application/json:
            schema:
              properties:
                status_id:
                  type: integer
                  example: 1
                date_time:
                  type: string
                  format: date-time
                  example: '2021-07-14 15:22:41'
                total_amount:
                  type: integer
                  format: double
                  example: 800
                pay_type_id:
                  type: integer
                  example: 3
                order_product:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: integer
                        example: 3
                      quantity:
                        type: integer
                        example: 2
                      price:
                        type: integer
                        format: double
                        example: 250
                      comments:
                        type: string
                        example: 'Sin picante'
      responses:
        201:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: 'order created'
                  data:
                    type: object
                    properties: 
                      order_id:
                        type: integer
                        example: 2
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/ServerError'
    get:
      tags:
      - orders
      summary: list all orders
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/order'
                  control:
                    $ref: '#/components/schemas/control'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'  
  /order/{order_id}:
    put:
      tags:
      - orders
      summary:  update data order
      security:
        - bearerAuth: []
      description: "**service available only for admin user**"
      parameters:
      - name: order_id
        in: path
        description: order id
        required: true
        schema: 
          type: integer
      requestBody:
        description: send order data to update
        content:
          application/json:
            schema:
              type: object
              properties:
                status_id:
                  type: integer
                  example:  3
                date_time:
                  type: string
                  format: date-time
                  example: 120
                pay_type_id: 
                  type: integer
                  example: 2
      responses:
        202:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 202
                  message:
                    type: string
                    example: 'order update'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/Unprocessable'
        500:
          $ref: '#/components/responses/ServerError' 
    delete:
      tags:
      - orders
      summary: delete order by id
      description: "**service available only for admin user**"
      security:
        - bearerAuth: []
      parameters:
      - name: order_id
        in: path
        description: order id
        required: true
        schema: 
          type: integer
      responses:
        202:
          description: Success
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 202
                  message:
                    type: string
                    example: 'order removed'
        401:
          $ref: '#/components/responses/Unauthorized' 
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'      
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_data'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_data'
    Forbidden:
      description: unauthorized user use request  
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_data'
    Unprocessable:
      description: a body parameter is required is null or empty
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_data'
    Conflict:
      description: Data conflict when processing the operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_data'
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_data'
  schemas:
    user_data_response:
      type: object
      properties:
        id:
          type: integer
          example: 4
        user:
          type: string
          example: 'RREINA'
        name:
          type: string
          example: 'Roberto Reina'
        email:
          type: string
          example: 'name@gmail.com'
        phone:
          type: string
          example: '56995694692'
        address:
          type: string
          example: 'Providencia 2144, Santiago'
        is_admin:
          type: boolean
          example: false
    user_data_request:
      type: object
      properties:
        user:
          type: string
          example: 'RREINA'
        name:
          type: string
          example: 'Roberto Reina'
        email:
          type: string
          example: 'name@gmail.com'
        phone:
          type: string
          example: '56995694692'
        address:
          type: string
          example: 'Providencia 2144, Santiago'
        password:
          type: string
          example: "a34dnfj3sf"
        is_admin:
          type: boolean
          example: false
    error_data:
      type: object
      properties:
        status:
          type: integer
          example: 401
        error:
          type: string
          example: 'Invalid username or password.'
    control:
      type: object
      properties:
        total_count:
          type: integer
          example: 1
    product:
      type: object
      properties:
        id:
          type: integer
          example: 4
        description:
          type: string
          example: 'Taco de Carne'
        price:
          type: integer
          example: 350
        quantity_available:
          type: integer
          example: 100
    order:
      type: object
      properties:
        id:
          type: integer
          example: 4
        date_time:
          type: string
          format: date-time
          example: '2021-07-14 15:22:41'
        total_amount:
          type: integer
          format: double
          example: 800
        user:
          $ref: '#/components/schemas/user_data_response'
        StatusOrders:
          type: object
          properties:
            id:
              type: integer
              example: 2
            description:
              type: string
              example: 'Confirmado'
        paytypes:
          type: object
          properties:
            id:
              type: integer
              example: 4
            description:
              type: string
              example: 'Transferencia'
        orders_has_products:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
                example: 3
              quantity:
                type: integer
                example: 2
              price:
                type: integer
                format: double
                example: 250
              comments:
                type: string
                example: 'Sin picante'
              products:
                type: object
                properties:
                  description:
                    type: string
                    example: 'Hamburguesa Clasica'
  securitySchemes:
    bearerAuth:             
      type: http
      scheme: bearer
      bearerFormat: JWT    